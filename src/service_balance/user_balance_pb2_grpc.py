# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

import service_balance.user_balance_pb2 as user__balance__pb2

GRPC_GENERATED_VERSION = "1.75.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in user_balance_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class UserBalanceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register_user_balance = channel.unary_unary(
            "/user_balance.UserBalance/register_user_balance",
            request_serializer=user__balance__pb2.User.SerializeToString,
            response_deserializer=user__balance__pb2.StatusResponse.FromString,
            _registered_method=True,
        )
        self.get_balance = channel.unary_unary(
            "/user_balance.UserBalance/get_balance",
            request_serializer=user__balance__pb2.User.SerializeToString,
            response_deserializer=user__balance__pb2.StatusResponse.FromString,
            _registered_method=True,
        )
        self.deposit = channel.unary_unary(
            "/user_balance.UserBalance/deposit",
            request_serializer=user__balance__pb2.UpdateRequest.SerializeToString,
            response_deserializer=user__balance__pb2.StatusResponse.FromString,
            _registered_method=True,
        )
        self.withdraw = channel.unary_unary(
            "/user_balance.UserBalance/withdraw",
            request_serializer=user__balance__pb2.UpdateRequest.SerializeToString,
            response_deserializer=user__balance__pb2.StatusResponse.FromString,
            _registered_method=True,
        )


class UserBalanceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register_user_balance(self, request, context):
        """каждый метод должен иметь одну чёткую структуру запроса"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_balance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def deposit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def withdraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_UserBalanceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "register_user_balance": grpc.unary_unary_rpc_method_handler(
            servicer.register_user_balance,
            request_deserializer=user__balance__pb2.User.FromString,
            response_serializer=user__balance__pb2.StatusResponse.SerializeToString,
        ),
        "get_balance": grpc.unary_unary_rpc_method_handler(
            servicer.get_balance,
            request_deserializer=user__balance__pb2.User.FromString,
            response_serializer=user__balance__pb2.StatusResponse.SerializeToString,
        ),
        "deposit": grpc.unary_unary_rpc_method_handler(
            servicer.deposit,
            request_deserializer=user__balance__pb2.UpdateRequest.FromString,
            response_serializer=user__balance__pb2.StatusResponse.SerializeToString,
        ),
        "withdraw": grpc.unary_unary_rpc_method_handler(
            servicer.withdraw,
            request_deserializer=user__balance__pb2.UpdateRequest.FromString,
            response_serializer=user__balance__pb2.StatusResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "user_balance.UserBalance", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "user_balance.UserBalance", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class UserBalance(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register_user_balance(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/user_balance.UserBalance/register_user_balance",
            user__balance__pb2.User.SerializeToString,
            user__balance__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get_balance(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/user_balance.UserBalance/get_balance",
            user__balance__pb2.User.SerializeToString,
            user__balance__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def deposit(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/user_balance.UserBalance/deposit",
            user__balance__pb2.UpdateRequest.SerializeToString,
            user__balance__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def withdraw(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/user_balance.UserBalance/withdraw",
            user__balance__pb2.UpdateRequest.SerializeToString,
            user__balance__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
