// #####################################################
// # Сервис позволяет управлять балансом пользователей #
// #####################################################

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.13.0
// source: protos/user_balance.proto

package user_balance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserBalance_RegisterUserBalance_FullMethodName = "/user_balance.UserBalance/register_user_balance"
	UserBalance_GetBalance_FullMethodName          = "/user_balance.UserBalance/get_balance"
	UserBalance_Deposit_FullMethodName             = "/user_balance.UserBalance/deposit"
	UserBalance_Withdraw_FullMethodName            = "/user_balance.UserBalance/withdraw"
)

// UserBalanceClient is the client API for UserBalance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserBalanceClient interface {
	// каждый метод должен иметь одну чёткую структуру запроса
	RegisterUserBalance(ctx context.Context, in *User, opts ...grpc.CallOption) (*StatusResponse, error)
	GetBalance(ctx context.Context, in *User, opts ...grpc.CallOption) (*StatusResponse, error)
	Deposit(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Withdraw(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type userBalanceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserBalanceClient(cc grpc.ClientConnInterface) UserBalanceClient {
	return &userBalanceClient{cc}
}

func (c *userBalanceClient) RegisterUserBalance(ctx context.Context, in *User, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UserBalance_RegisterUserBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceClient) GetBalance(ctx context.Context, in *User, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UserBalance_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceClient) Deposit(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UserBalance_Deposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBalanceClient) Withdraw(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UserBalance_Withdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserBalanceServer is the server API for UserBalance service.
// All implementations must embed UnimplementedUserBalanceServer
// for forward compatibility.
type UserBalanceServer interface {
	// каждый метод должен иметь одну чёткую структуру запроса
	RegisterUserBalance(context.Context, *User) (*StatusResponse, error)
	GetBalance(context.Context, *User) (*StatusResponse, error)
	Deposit(context.Context, *UpdateRequest) (*StatusResponse, error)
	Withdraw(context.Context, *UpdateRequest) (*StatusResponse, error)
	mustEmbedUnimplementedUserBalanceServer()
}

// UnimplementedUserBalanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserBalanceServer struct{}

func (UnimplementedUserBalanceServer) RegisterUserBalance(context.Context, *User) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserBalance not implemented")
}
func (UnimplementedUserBalanceServer) GetBalance(context.Context, *User) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedUserBalanceServer) Deposit(context.Context, *UpdateRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedUserBalanceServer) Withdraw(context.Context, *UpdateRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedUserBalanceServer) mustEmbedUnimplementedUserBalanceServer() {}
func (UnimplementedUserBalanceServer) testEmbeddedByValue()                     {}

// UnsafeUserBalanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserBalanceServer will
// result in compilation errors.
type UnsafeUserBalanceServer interface {
	mustEmbedUnimplementedUserBalanceServer()
}

func RegisterUserBalanceServer(s grpc.ServiceRegistrar, srv UserBalanceServer) {
	// If the following call pancis, it indicates UnimplementedUserBalanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserBalance_ServiceDesc, srv)
}

func _UserBalance_RegisterUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBalanceServer).RegisterUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBalance_RegisterUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBalanceServer).RegisterUserBalance(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBalance_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBalanceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBalance_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBalanceServer).GetBalance(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBalance_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBalanceServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBalance_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBalanceServer).Deposit(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBalance_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBalanceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBalance_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBalanceServer).Withdraw(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserBalance_ServiceDesc is the grpc.ServiceDesc for UserBalance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserBalance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_balance.UserBalance",
	HandlerType: (*UserBalanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register_user_balance",
			Handler:    _UserBalance_RegisterUserBalance_Handler,
		},
		{
			MethodName: "get_balance",
			Handler:    _UserBalance_GetBalance_Handler,
		},
		{
			MethodName: "deposit",
			Handler:    _UserBalance_Deposit_Handler,
		},
		{
			MethodName: "withdraw",
			Handler:    _UserBalance_Withdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user_balance.proto",
}
